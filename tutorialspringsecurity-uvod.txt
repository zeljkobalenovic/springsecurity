Tutorial o Spring Security

ovaj projekt sluzi za ovladavanje upotrebe spring security u razvoju aplikacija ( u ovom slucaju spring boot web aplikacija)

koriscen alat vs code , ponovljena procedura za pravljenje projekta aplikacije

koraci (sve iz menija view - command palette ili ctrl+shift+p)

1   spring inicijalzer - generate mavem project ( popunjava se sve klasicno)
2   git inicijalize repository (ukljucuje projekt u lokalni git)
3   napravimo repository na github , git add remote (ime origin , url copy sa gita) 
4   radimo klasicno stage-commit pa push to na remote ili pull from remote ...


SPRING SECURITY 

je security frejmvork za spring i spring boot. aktivira se ubacivanjem dependecija u pom.xml. Sluzi za sve moguce security radnje 
koje su potrebne svakoj aplikaciji koju razvijam ( autentikacija , autorizacija , login funkcionalnost , zastita endpointa ...)

Zasniva se na 5 core koncepata :

Authentication 
ko si ti ? ( kad neko hoce da koristi aplikaciju) . svaka aplikacija ima negde accounte ( id(username) - jedinstven , password i jos stvari po izboru). Prvo se obavlja authentication ( na osnovu znanja ili posedovanja) autentikacija na osnovu znanja je npr. login pomocu username i password ( znanja zato sto niko osim korisnika nezna username i password). autentikacija na osnovu posedovanja jekada se ti prijavis a applikacija ti na mejl ili telefon posalje poruku za verifikaciju ( jedino ti posedujes taj telefon ili taj mejl). moze se koristiti i kombinacija ta dva metoda . Za svrhu ove vezbe cu koristiti klasicnu username password autentikaciju
Naravno pre iste je potrebna registracija ( izabere se username - mora biti jedinstven u aplikaciji i password). Kad se korisnik prijavljuje u aplikaciju ( autentikuje se ) aplikacija ga pronadje po username medju accountima i ako ga nadje uporedi passworde,
ako je sve ok korisnik se smatra autentifikovanim , ako ne obavestimo ga sa npr. bad credentials ili sl.

Authorization
Sta hoces ? (kada korisnik salje zahtev sta hoce). Ova faza uvek ide posle autentikacije i opciona je ( tj. aplikaciju mozemo napraviti da je svaka akcija svima dozvoljena). Uopstem slucaju su razlicite akcije u aplikaciji dozvoljene ili zabranjene u zavisnosti da li je korisnik za njih autorizovan ili ne. U tu svrhu neko odlucuje sta je kome dozvoljeno i to mora biti uneto u korisnikov account ( npr. korisnik je obican user , neki sef koji moze i nesto sto obican user nemoze ili administrator koji moze bas sve u aplikaciji i sl.). isto kao prethodno ako aplikacija autorizuje korisnika ( uporedjujuci sta mu je dozvoljeno sa onim sto on trazi) smatra se autorizovanim , ako nije ok korisnik se obavesti da nema privilegije za to sto trazi

Principal
je najkrace trenutno logovan korisnik ( kad se neko prvi put loguje i to prodje ok. aplikacija ce sacuvati sve iz accounta o tom korisniku kao principal objekt u spring security sto ce omoguciti da pri svakom sledecem zahtevu korisnik nemora ponovo da unosi username i password). To vazi samo za tekucu sesiju. Ako korisnik npr. zatvori browser pa ga ponovo otvori sesija se gubi i korisnik mora ponovo da se prijavljuje.

Granted Authority
lista akcija koje su dozvoljene korisnicima koji imaju odgovarajuce role ( npr user sme da unese, izmeni, obrise i stampa racun), a sef sme da pregleda prodaju u nekom periodu iz tih racuna i sl.

Roles
Su dodeljene uloge korisnicima npr. korisnik a je samo obican user , korisnik b je sef , a korisnik c je i jedno i drugo ( ima dodeljene obe role). Zato se roles obicno cuva u listi dodeljenih rola.


