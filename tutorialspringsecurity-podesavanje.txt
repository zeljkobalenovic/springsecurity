Spring Security podesavanje

spring security ima svoje default podesavanje (starting point) koje cemo menjati u skladu sa potrebama nase aplikacije nadalje:

1 configure authentication in spring security :

    realan slucaj je da mi imamo usere ( recimo u nekoj bazi). pocecemo sa jednostavnijom hardcode listom usera inmemory
    za autentikaciju je odgovoran AuthenticationManager , koji ima jednu metodu authenticate(), koja vraca logovanog usera ako je sve ok ili baca exception ako nije ( npr. nema usera ili je pogresan password). Mi ne pisemo nas nego konfigurisemo postojeci AuthenticationManager koji vec postoji u Spring security. To se neradi direktno nego preko builder paterna , tj. AuthenticationManagerBuilder nam napravi AuthenticationManager koga mi prilagodimo nasim potrebama. Mi hocemo inmemory tip autentikacije i listu nasih usera ( hardcodovanu ) i to trazimo od AuthenticationManagrBuldera da nam napravi takav AuthenticationManager. 
    
    To se radi tako sto napravimo nasu class npr SecurityConfiguration ( ime nije bitno ), koja OBAVEZNO extenduje WebSecurityConfigurerAdapter , i onda overajdujemo configure(auth:AuthenticationManagerBuilder) . obavezno je i celu klasu anotireti sa @EnableWebSecurity jer postoje i drugaciji scenariji ( npr. application metod seccurity ...). Posto mi pravimo web aplikaciju onda je @EnableWebSecurity.
    Gotovo resenje je u SecurityConfiguration.java (zeljeni primer). To je prosta varijanta ali radi. Sledece je za isti prosti scenario :

2 configure authorization in spring security

    starting point je prethodno uradjeno. za autorizaciju nam trebaju jos dva endpointa sa razlicitim dozvolama pristupa (sve je u HommeController.java - iz toga je sve jasno sta treba konfigurisati).

    Kao i u prethodnom slucaju autorizaciju podesavamo konfigurisanjem objekta ( za web autorizaciju to je httpsecurity, i isto overajdujemo configre() metod po nasim potrebama. Kako je uradjeno videti u SecurityConfiguration.java ( ista klasa koja je konfigurisala autentifikaciju koristi se i za konfigurisanje autorizacije) tamo su primeri


    VAZNO !!!

    kako ustvari autentifikacija radi ( u slucaju web aplikacija )

    1 request ka aplikaciji prvo dolazi do spring security filtera ( ima ih vise , oni presrecu request)
    2 kad dodje request filter napravi authentication objekat. u njega stavlja credentiale koje je poslao user
    3 autenticationmanager uzima kredencije i radi metodu autenticate() ( posto ima raznih autentikacija za to proziva odgovarajuci authentication provider koji zapravo radi authenticate() , za tip autentikacije koji taj provider podrzava supports() metoda).
    npr. password autentikacija , ldap , kerberos ... postoje razne pa ima i raznih providera .
    4 authentication provider poziva userdetailservice koji ima jednu metodu loaduserbyusername .
    5 posto useri mogu biti na razlicitim npr. bazama userdetailsservice ima zadatak da na osnovu username vrati usera iz baze 
    6 autentikacion provider zatim uzme taj user iz baze i uradi autenticate() npr uporedi passworde , vidi da li je istekla ...
    7 ako je ok autentikacion manageru vrati principal objekat , a ako nevalja baci autentikacion exception
    8 principal se upise u authentacion objekat koji se vrati filteru i to je to
    9 filter cuva objekat authentacion u thread local ( prakticno sesiji ) da se nebi stalno korisnik morao autentifikovati kad salje requeste - to je veza securitycontexta i sesije sto radi drugi filter.

jdbc autentikacija i autorizacija objasnjena je u SecurityConfiguration.java ( sve varijante )








